// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sequences/sequence.proto

package sequences

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Sequence struct {
	Id           int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTimeMS int64 `protobuf:"varint,2,opt,name=createTimeMS,proto3" json:"createTimeMS,omitempty"`
	NodeID       int64 `protobuf:"varint,3,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Index        int64 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`
	DcID         int64 `protobuf:"varint,5,opt,name=dcID,proto3" json:"dcID,omitempty"`
}

func (m *Sequence) Reset()      { *m = Sequence{} }
func (*Sequence) ProtoMessage() {}
func (*Sequence) Descriptor() ([]byte, []int) {
	return fileDescriptor_038c68614ef927eb, []int{0}
}
func (m *Sequence) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sequence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sequence.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sequence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sequence.Merge(m, src)
}
func (m *Sequence) XXX_Size() int {
	return m.Size()
}
func (m *Sequence) XXX_DiscardUnknown() {
	xxx_messageInfo_Sequence.DiscardUnknown(m)
}

var xxx_messageInfo_Sequence proto.InternalMessageInfo

func (m *Sequence) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Sequence) GetCreateTimeMS() int64 {
	if m != nil {
		return m.CreateTimeMS
	}
	return 0
}

func (m *Sequence) GetNodeID() int64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *Sequence) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Sequence) GetDcID() int64 {
	if m != nil {
		return m.DcID
	}
	return 0
}

func init() {
	proto.RegisterType((*Sequence)(nil), "commons.sequences.Sequence")
}

func init() { proto.RegisterFile("sequences/sequence.proto", fileDescriptor_038c68614ef927eb) }

var fileDescriptor_038c68614ef927eb = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0x4e, 0x2d, 0x2c,
	0x4d, 0xcd, 0x4b, 0x4e, 0x2d, 0xd6, 0x87, 0xb1, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x04,
	0x93, 0xf3, 0x73, 0x73, 0xf3, 0xf3, 0x8a, 0xf5, 0xe0, 0x2a, 0x94, 0x1a, 0x18, 0xb9, 0x38, 0x82,
	0xa1, 0x3c, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0xa6,
	0xcc, 0x14, 0x21, 0x25, 0x2e, 0x9e, 0xe4, 0xa2, 0xd4, 0xc4, 0x92, 0xd4, 0x90, 0xcc, 0xdc, 0x54,
	0xdf, 0x60, 0x09, 0x26, 0xb0, 0x0c, 0x8a, 0x98, 0x90, 0x18, 0x17, 0x5b, 0x5e, 0x7e, 0x4a, 0xaa,
	0xa7, 0x8b, 0x04, 0x33, 0x58, 0x16, 0xca, 0x13, 0x12, 0xe1, 0x62, 0xcd, 0xcc, 0x4b, 0x49, 0xad,
	0x90, 0x60, 0x01, 0x0b, 0x43, 0x38, 0x42, 0x42, 0x5c, 0x2c, 0x29, 0xc9, 0x9e, 0x2e, 0x12, 0xac,
	0x60, 0x41, 0x30, 0xdb, 0xc9, 0xfe, 0xc2, 0x43, 0x39, 0x86, 0x1b, 0x0f, 0xe5, 0x18, 0x3e, 0x3c,
	0x94, 0x63, 0x6c, 0x78, 0x24, 0xc7, 0xb8, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72, 0x8c, 0x17,
	0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0xf8, 0xe2, 0x91, 0x1c, 0xc3, 0x87, 0x47, 0x72, 0x8c,
	0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x14, 0x27, 0xdc,
	0x0f, 0x49, 0x6c, 0x60, 0xdf, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x78, 0x1f, 0x73, 0x52,
	0xf9, 0x00, 0x00, 0x00,
}

func (this *Sequence) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Sequence)
	if !ok {
		that2, ok := that.(Sequence)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.CreateTimeMS != that1.CreateTimeMS {
		return false
	}
	if this.NodeID != that1.NodeID {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.DcID != that1.DcID {
		return false
	}
	return true
}
func (this *Sequence) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&sequences.Sequence{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "CreateTimeMS: "+fmt.Sprintf("%#v", this.CreateTimeMS)+",\n")
	s = append(s, "NodeID: "+fmt.Sprintf("%#v", this.NodeID)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "DcID: "+fmt.Sprintf("%#v", this.DcID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSequence(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Sequence) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sequence) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sequence) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DcID != 0 {
		i = encodeVarintSequence(dAtA, i, uint64(m.DcID))
		i--
		dAtA[i] = 0x28
	}
	if m.Index != 0 {
		i = encodeVarintSequence(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x20
	}
	if m.NodeID != 0 {
		i = encodeVarintSequence(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x18
	}
	if m.CreateTimeMS != 0 {
		i = encodeVarintSequence(dAtA, i, uint64(m.CreateTimeMS))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintSequence(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSequence(dAtA []byte, offset int, v uint64) int {
	offset -= sovSequence(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Sequence) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovSequence(uint64(m.Id))
	}
	if m.CreateTimeMS != 0 {
		n += 1 + sovSequence(uint64(m.CreateTimeMS))
	}
	if m.NodeID != 0 {
		n += 1 + sovSequence(uint64(m.NodeID))
	}
	if m.Index != 0 {
		n += 1 + sovSequence(uint64(m.Index))
	}
	if m.DcID != 0 {
		n += 1 + sovSequence(uint64(m.DcID))
	}
	return n
}

func sovSequence(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSequence(x uint64) (n int) {
	return sovSequence(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Sequence) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Sequence{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`CreateTimeMS:` + fmt.Sprintf("%v", this.CreateTimeMS) + `,`,
		`NodeID:` + fmt.Sprintf("%v", this.NodeID) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`DcID:` + fmt.Sprintf("%v", this.DcID) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSequence(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Sequence) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSequence
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sequence: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sequence: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTimeMS", wireType)
			}
			m.CreateTimeMS = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTimeMS |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DcID", wireType)
			}
			m.DcID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSequence
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DcID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSequence(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSequence
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSequence(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSequence
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSequence
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSequence
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSequence
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSequence
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSequence
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSequence        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSequence          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSequence = fmt.Errorf("proto: unexpected end of group")
)
